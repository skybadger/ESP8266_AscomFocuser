//ASCOM Filterwheel REST API specific functions
#include "ASCOMAPIFocuser_rest.h"

#if !defined _Focuser_Handlers_h_
#define _Focuser_Handlers_h_
   
/*
General mechanism is to read and validate all input and then set the focuserCmd value to the desired cmd. 
The state handler will read the associated values and use them to set the activities in motion. 
*/

//Default common ASCOM calls are implemented in ASCOM_Rest. 

/*Properties
void handleFocuserAbsolute( void );
void handleFocuserMovingGet( void );
void handleFocuserMaxIncrementGet( void);
void handleFocuserMaxStepGet( void );
void handleFocuserPositionGet (void );
void handleFocuserStepSizeGet (void );
void handleFocuserTempCompModePut( void );
void handleFocuserTempCompModeGet( void );
void handleFocuserTempCompAvailableGet(void);
void handleFocuserTempGet(void);
*/

/*Methods
void handleFocuserHaltPut( void );
void handleFocuserMovePut(void );
*/

void handleFocuserHaltPut(void )
{
  String message;
  uint32_t clientID= -1;
  uint32_t transID = -1;
  int localPosition = 0;
  String argToSearchFor[] = { "clientID", "ClientTransactionID" };
  
  if( hasArgIC( argToSearchFor[0], server, false ) )
    clientID = server.arg(argToSearchFor[0]).toInt();
  
  if ( hasArgIC( argToSearchFor[1], server, false) )
    transID = server.arg(argToSearchFor[1]).toInt();

  DynamicJsonBuffer jsonBuffer(256);
  JsonObject& root = jsonBuffer.createObject();

  if ( connected == NOT_CONNECTED )
  {
    jsonResponseBuilder( root, clientID, transID, ++serverTransID, "Halt", NotConnected , F("Not the connected client") );    
  }
/* else if ( !isMoving || focuserState != FocuserStates::FOCUSER_IDLE )
  {
    jsonResponseBuilder( root, clientID, transID, ++serverTransID, "Halt", DriverException , "Focuser " );      
    debugD( "Getting ( client %d trans %d ) Halt request resulted in value: %d", clientID, transID, focuserState );   
  }
*/
  else //success path
  {  
    focuserCmd = FocuserCmds::FOCUSER_HALT;  
    jsonResponseBuilder( root, clientID, transID, ++serverTransID, "Halt", Success , "" );      
    debugD( "Getting ( client %d trans %d ) Halt request resulted in value: %d", clientID, transID, focuserState );
  }
  
  root.printTo(message);
  server.send(200, F("application/json"), message);
  return ;  
}

void handleFocuserMovePut(void )
{
  String message;
  uint32_t clientID= -1;
  uint32_t transID = -1;
  int localPosition = 0;
  String argToSearchFor[] = { "clientID", "ClientTransactionID", "position" };
  
  if( hasArgIC( argToSearchFor[0], server, false ) )
    clientID = server.arg(argToSearchFor[0]).toInt();
  
  if ( hasArgIC( argToSearchFor[1], server, false) )
    transID = server.arg(argToSearchFor[1]).toInt();

  if ( hasArgIC( argToSearchFor[1], server, false) )
    localPosition = server.arg(argToSearchFor[2]).toInt();

  DynamicJsonBuffer jsonBuffer(256);
  JsonObject& root = jsonBuffer.createObject();

  if ( connected == NOT_CONNECTED )
  {
    jsonResponseBuilder( root, clientID, transID, ++serverTransID, "Halt", NotConnected , F("Not the connected client") );    
  }
  else if ( isMoving || focuserState != FocuserStates::FOCUSER_IDLE )
  {
    jsonResponseBuilder( root, clientID, transID, ++serverTransID, "Halt", InvalidValue , "Focuser not ready" );      
    debugD( "Getting ( client %d trans %d ) Halt request resulted in value: %d", clientID, transID, focuserState );   
  }
  else //success path
  {  
    focuserCmd = FocuserCmds::FOCUSER_MOVE;
    targetPosition  = localPosition;
    jsonResponseBuilder( root, clientID, transID, ++serverTransID, "Halt", Success , "" );      
    debugD( "Getting ( client %d trans %d ) Halt request resulted in value: %d", clientID, transID, focuserState );
  }
  
  root.printTo(message);
  server.send(200, F("application/json"), message);
  return ;  
}

//GET ​/focuser​/{device_number}​/absolute
void handlerFocuserTypeGet(void)
{
    String message;
    uint32_t clientID= -1;
    uint32_t transID = -1;
    String argToSearchFor[] = { "clientID", "ClientTransactionID" };
    
    if( hasArgIC( argToSearchFor[0], server, false ) )
      clientID = server.arg(argToSearchFor[0]).toInt();
    
    if ( hasArgIC( argToSearchFor[1], server, false) )
      transID = server.arg(argToSearchFor[1]).toInt();

    debugD( "Getting ( client %d trans %d ) Absolute mode  resulted in value: %d", clientID, transID, absMode );
    DynamicJsonBuffer jsonBuffer(256);
    JsonObject& root = jsonBuffer.createObject();
    jsonResponseBuilder( root, clientID, transID, ++serverTransID, "AbsoluteGet", Success , "" );    
    root["Value"] = absMode;
    
    root.printTo(message);
    server.send(200, F("application/json"), message);
    return ;
}

//GET ​/focuser​/{device_number}​/IsMoving
//Return the limit of the brightness setting available
void handlerFocuserMovingGet(void)
{
    String message;
    uint32_t clientID= -1;
    uint32_t transID = -1;
    String argToSearchFor[] = { "clientID", "ClientTransactionID", };
    bool isMoving = ( focuserState == FocuserStates::FOCUSER_MOVING );
    
    if( hasArgIC( argToSearchFor[0], server, false ) )
      clientID = server.arg(argToSearchFor[0]).toInt();
    
    if ( hasArgIC( argToSearchFor[1], server, false) )
      transID = server.arg(argToSearchFor[1]).toInt();

    debugD( "Getting ( client %d trans %d ) IsMoving resulted in value: %d", clientID, transID, isMoving );
    DynamicJsonBuffer jsonBuffer(256);
    JsonObject& root = jsonBuffer.createObject();
    jsonResponseBuilder( root, clientID, transID, ++serverTransID, "IsMovingGet", Success , "" );    
    root["Value"] = isMoving;
    root.printTo(message);
    server.send(200, F("application/json"), message);
    return ;
}

//Get the focuser max increment setting
void handlerFocuserMaxIncrementGet(void)
{
    String message;
    int returnCode = 200;

    uint32_t clientID= -1;
    uint32_t transID = -1;
    String argToSearchFor[] = { "clientID", "ClientTransactionID", };
    DynamicJsonBuffer jsonBuffer(256);
    
    if( hasArgIC( argToSearchFor[0], server, false ) )
      clientID = server.arg(argToSearchFor[0]).toInt();
    
    if ( hasArgIC( argToSearchFor[1], server, false) )
      transID = server.arg(argToSearchFor[1]).toInt();

    debugD( "Getting (client %d trans %d) focuser state resulted in value: %s", clientID, transID, maxIncrement  );
    JsonObject& root = jsonBuffer.createObject();
    jsonResponseBuilder( root, clientID, transID, ++serverTransID, F("MaxIncrementGet"), Success , "" );    
 
    root["Value"] = (int) maxIncrement;

    root.printTo(message);
    server.send(returnCode, F("application/json"), message);
    return;
}

//Get the focuser max step setting
void handlerFocuserMaxStepGet(void)
{
    String message;
    int returnCode = 200;

    uint32_t clientID= -1;
    uint32_t transID = -1;
    String argToSearchFor[] = { "clientID", "ClientTransactionID", };
    DynamicJsonBuffer jsonBuffer(256);
    
    if( hasArgIC( argToSearchFor[0], server, false ) )
      clientID = server.arg(argToSearchFor[0]).toInt();
    
    if ( hasArgIC( argToSearchFor[1], server, false) )
      transID = server.arg(argToSearchFor[1]).toInt();

    debugD( "Getting (client %d trans %d) focuser state resulted in value: %s", clientID, transID, maxStep  );
    JsonObject& root = jsonBuffer.createObject();
    jsonResponseBuilder( root, clientID, transID, ++serverTransID, F("MaxStepGet"), Success , "" );    
 
    root["Value"] = (int) maxStep;

    root.printTo(message);
    server.send(returnCode, F("application/json"), message);
    return;
}

//Gets the fpcuser position - TODO need to add consideration for abs vs rel. 
void handlerFocuserPositionGet(void)
{
    String message;
    int returnCode = 200;

    DynamicJsonBuffer jsonBuffer(256);
    uint32_t clientID= -1;
    uint32_t transID = -1;
    String argToSearchFor[] = { F("clientID"), F("ClientTransactionID"), };
    
    if( hasArgIC( argToSearchFor[0], server, false ) )
      clientID = server.arg(argToSearchFor[0]).toInt();
    
    if ( hasArgIC( argToSearchFor[1], server, false) )
      transID = server.arg(argToSearchFor[1]).toInt();
   
    debugD( "Getting (client %d trans %d) calibrator state resulted in state: %s, ", clientID, transID, position  );
    
    JsonObject& root = jsonBuffer.createObject();
    jsonResponseBuilder( root, clientID, transID, ++serverTransID, F("PositionGet"), Success , "" );    
 
    root["Value"] = (int) position;
    root.printTo(message);
    server.send( returnCode = 200, F("application/json"), message);
    return;
}

void handleFocuserStepSizeGet (void )
{
    String message;
    int returnCode = 200;

    DynamicJsonBuffer jsonBuffer(256);
    uint32_t clientID= -1;
    uint32_t transID = -1;
    String argToSearchFor[] = { F("clientID"), F("ClientTransactionID"), F("stepSize") };
    
    if( hasArgIC( argToSearchFor[0], server, false ) )
      clientID = server.arg(argToSearchFor[0]).toInt();
    
    if ( hasArgIC( argToSearchFor[1], server, false) )
      transID = server.arg(argToSearchFor[1]).toInt();
   
    debugD( "Getting (client %d trans %d) stepSize resulted in : %d, ", clientID, transID, stepSize  );
    
    JsonObject& root = jsonBuffer.createObject();
    jsonResponseBuilder( root, clientID, transID, ++serverTransID, F("StepSizeGet"), Success , "" );    
 
    root["Value"] = (int) stepSize;
    root.printTo(message);
    server.send( returnCode = 200, F("application/json"), message);
    return;  
}

void handleFocuserTempCompModeGet( void )
{
    String message;
    int returnCode = 200;

    DynamicJsonBuffer jsonBuffer(256);
    uint32_t clientID= -1;
    uint32_t transID = -1;
    String argToSearchFor[] = { F("clientID"), F("ClientTransactionID"), F("stepSize") };
    
    if( hasArgIC( argToSearchFor[0], server, false ) )
      clientID = server.arg(argToSearchFor[0]).toInt();
    
    if ( hasArgIC( argToSearchFor[1], server, false) )
      transID = server.arg(argToSearchFor[1]).toInt();
   
    debugD( "Getting (client %d trans %d) tempCompMode resulted in : %d, ", clientID, transID, tempCompEnabled  );
    
    JsonObject& root = jsonBuffer.createObject();
    jsonResponseBuilder( root, clientID, transID, ++serverTransID, F("tempCompEnabled"), Success , "" );    
 
    root["Value"] = (int) stepSize;
    root.printTo(message);
    server.send( returnCode = 200, F("application/json"), message);
    return;  
  
}

void handleFocuserTempCompModePut( void )
{
    String message, errMsg;
    int returnCode = 200, errCode = Success;

    DynamicJsonBuffer jsonBuffer(256);
    uint32_t clientID= -1;
    uint32_t transID = -1;
    String argToSearchFor[] = { F("clientID"), F("ClientTransactionID"), F("tempCompMode") };
    boolean tempCompModeLocal = tempCompAvailable;
    
    if( hasArgIC( argToSearchFor[0], server, false ) )
      clientID = server.arg(argToSearchFor[0]).toInt();
    
    if ( hasArgIC( argToSearchFor[1], server, false) )
      transID = server.arg(argToSearchFor[1]).toInt();

    if ( hasArgIC( argToSearchFor[2], server, false) )
      tempCompModeLocal = server.arg(argToSearchFor[2]).toBoolean();
     
    JsonObject& root = jsonBuffer.createObject();

    if( clientId != connected || connected == NOT_CONNECTED) 
    {
      jsonResponseBuilder( root, clientID, transID, ++serverTransID, F("tempCompModePut"), NotConnected , F("This is not the connected client") );    
      returnCode = 200;
    }
    else
    {
      tempCompEnabled = tempCompModeLocal;
      jsonResponseBuilder( root, clientID, transID, ++serverTransID, F("tempCompModePut"), Success , "" );    

      //Anything to setup ? 
      //Check for values available in the array - otherwise we need a default ? 
    }
  
    root.printTo(message);
    server.send( returnCode, F("application/json"), message);
    return;  
  
}

void handleFocuserTempCompModeGet(void)
{
      String message;
    int returnCode = 200;

    DynamicJsonBuffer jsonBuffer(256);
    uint32_t clientID= -1;
    uint32_t transID = -1;
    String argToSearchFor[] = { F("clientID"), F("ClientTransactionID"), };
    
    if( hasArgIC( argToSearchFor[0], server, false ) )
      clientID = server.arg(argToSearchFor[0]).toInt();
    
    if ( hasArgIC( argToSearchFor[1], server, false) )
      transID = server.arg(argToSearchFor[1]).toInt();
   
    debugD( "Getting (client %d trans %d) tempCompAvailable resulted in : %d, ", clientID, transID, tempCompEnabled  );
    
    JsonObject& root = jsonBuffer.createObject();
    jsonResponseBuilder( root, clientID, transID, ++serverTransID, F("tempCompEnabled"), Success , "" );    
 
    root["Value"] = (int) tempCompEnabled;
    root.printTo(message);
    server.send( returnCode = 200, F("application/json"), message);
    return; 
}

void handleFocuserTempGet(void)
{
    String message;
    int returnCode = 200;

    DynamicJsonBuffer jsonBuffer(256);
    uint32_t clientID= -1;
    uint32_t transID = -1;
    String argToSearchFor[] = { F("clientID"), F("ClientTransactionID"), };
    
    if( hasArgIC( argToSearchFor[0], server, false ) )
      clientID = server.arg(argToSearchFor[0]).toInt();
    
    if ( hasArgIC( argToSearchFor[1], server, false) )
      transID = server.arg(argToSearchFor[1]).toInt();
   
    debugD( "Getting (client %d trans %d) temperature resulted in : %f, ", clientID, transID, temperature  );
    
    JsonObject& root = jsonBuffer.createObject();
    jsonResponseBuilder( root, clientID, transID, ++serverTransID, F("temperature"), Success , "" );    
 
    root["Value"] = (float) temperature;
    root.printTo(message);
    server.send( returnCode = 200, F("application/json"), message);
    return; 
}

/*
  void handleHeaterGet( void )
  {
    String timeString = "", message = "";

    DynamicJsonBuffer jsonBuffer(256);
    JsonObject& root = jsonBuffer.createObject();

    root["time"] = getTimeAsString( timeString );
    root["servoing"]       = (bool) aPidEnable;
    root["dewpoint"]       = (bool) dewpointTrackState;

    if( tempSensPresent )
    {
      root["temperature"]    = (double) targetTemperature;
    }
    else
      root["Message"]     = "Heater temp sensor not present";

    root.printTo( Serial );Serial.println(" ");
    root.printTo(message);
    server.send(200, "application/json", message);      
  }

  void handleHeaterPut( void )
  {
    String timeString = "", message = "";
    DynamicJsonBuffer jsonBuffer(256);
    JsonObject& root = jsonBuffer.createObject();

    float newTemp = targetTemperature;
    bool servoing = aPidEnable;
    bool dewpointTracking = dewpointTrackState;
    
    int status = 200;
    
    if( server.hasArg( "temperature" ) || server.hasArg( "servo" ) || server.hasArg( "dewpoint" ) )
    {
       //Update existing with new if valid. 
       if( server.hasArg( "temperature" ) )
       {
          newTemp = (float)server.arg("temperature").toDouble();
          if( newTemp <= 35.0 && newTemp >= 0.0 )
             targetTemperature = newTemp;
       }

       if( server.hasArg( "servo" ) )
       {
          servoing = server.arg("servo").toInt();
          if( servoing == true || servoing == false )
          {
            servoing = ( servoing == 0 )? false: true;
            aPidEnable = servoing;
          }
       }
       
       if( server.hasArg( "dewpoint" ) )
       {
          dewpointTracking = server.arg("dewpoint").toInt();
          if( dewpointTracking == 0 || dewpointTracking == 1 )
          {
            dewpointTracking = ( dewpointTracking == 0 )? false: true;
            dewpointTrackState =  dewpointTracking;
          }
       }
       status = 200;
    }
    else
    {
       status = 401;
    }

    root["time"] = getTimeAsString( timeString );
    
    if( tempSensPresent )
      root["temperature"]    = (double) targetTemperature;
    root["servoing"]       =  ( aPidEnable == true )? "true": "false";
    root["dewpoint"]       =  ( dewpointTrackState == true )? "true": "false";
    
    root.printTo( message );
    server.send( status, "application/json", message);      
  }
*/
 
 void handleStatusGet( void)
 {
    String timeString = "", message = "";
    DynamicJsonBuffer jsonBuffer(256);
    JsonObject& root = jsonBuffer.createObject();
    //Update the error message handling.
    // JsonArray errors = root.createArray( "errors" );
    
    root["time"] = getTimeAsString( timeString );

    root.printTo( Serial ); Serial.println(" ");
    root.printTo( message );
    server.send(200, "application/json", message);  
 }

   /*
   * Web server handler functions
   */
  void handleNotFound()
  {
  String message = "URL not understood\n";
  message.concat( "Simple status read: http://");
  message.concat( myHostname );
  message.concat ( "\n");
  message.concat( "position read: http://");
  message.concat( myHostname );
  message.concat ( "/position \n");
  message.concat( "heater?temperature=&serving=&dewpoint= write: http://");
  message.concat( myHostname );
  message.concat ( "/ \n");

  server.send(404, "text/plain", message);
  }
 
  //Return sensor status
  void handleRoot()
  {
    String timeString = "", message = "";
    DynamicJsonBuffer jsonBuffer(256);
    JsonObject& root = jsonBuffer.createObject();

    root["time"] = getTimeAsString( timeString );
    //Todo add system status here
    
    
    //root.printTo( Serial );
    root.printTo(message);
    server.send(200, "application/json", message);
  }

#endif
